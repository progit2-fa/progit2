=== کنترل نسخه

(((version control)))
«کنترل نسخه» چیست و چرا باید بدان پرداخت؟ کنترل نسخه سیستمی است که تغییرات را در فایل یا دسته‌ای از
فایل‌ها ذخیره می‌کند و به شما این امکان را می‌دهد که در آینده به نسخه و نگارش خاصی برگردید.
برای مثال‌های این کتاب شما از سورس کد نرم‌افزار به عنوان فایل‌هایی که نسخه آنها کنترل می‌شود استفاده می‌کنید.
اگرچه در واقع می‌توانید تقریباً از هر فایلی استفاده کنید.

اگر شما یک گرافیست یا طراح وب هستید و می‌خواهید نسخه‌های متفاوت از عکس ها و قالب‌های خود داشته باشید (که احتمالاً می‌خواهید)، یک سیستم کنترل نسخه (Version Control System (VCS)) انتخاب خردمندانه‌ای است.
یک VCS به شما این امکان را می‌دهد که فایل‌های انتخابی یا کل پروژه را به یک حالت قبلی خاص برگردانید، روند تغییرات را بررسی کنید، ببینید چه کسی آخرین‌بار تغییری ایجاد کرده که احتمالاً مشکل آفرین شده،
چه کسی، چه وقت مشکلی را اعلام کرده و...
استفاده از یک VCS همچنین به این معناست که اگر شما در حین کار چیزی را خراب کردید و یا فایل‌هایی از دست رفت، به سادگی می توانید کارهای انجام شده را بازیابی نمایید.
همچنین مقداری سربار به فایل‌های پروژه‌تان افزوده می‌شود.

==== سیستم‌های کنترل نسخهٔ محلی

(((version control,local)))
روش اصلی کنترل نسخه توسط کثیری از افراد کپی کردن فایل‌ها به پوشه‌ای دیگر است (احتمالاً با تاریخ‌گذاری، اگر خیلی باهوش باشند).
این رویکرد به علت سادگی بسیار رایج است هرچند خطا آفرینی بالایی دارد.
فراموش کردن اینکه در کدام پوشه بوده‌اید و نوشتن اشتباهی روی فایل یا فایل‌هایی که نمی‌خواستید روی آن بنویسید بسیار ساده است.

برای حل این مشکل، سال‌ها قبل VCSهای محلی و را توسعه دادند که پایگاه داده‌ای ساده داشت که تمام تغییرات فایل‌های تحت مراقبتش را نگهداری می‌کرد.

.Local version control.
image::images/local.png[Local version control diagram]

یکی از شناخته‌شده‌ترین ابزاری‌های کنترل نسخه، سیستمی به نام RCS بود که حتی امروز، با بسیاری از کامپیوترها توزیع می‌شود.
RCS با نگه داشتن مجموعه‌هایی از پچ‌ها (Patch/وصله) -- همان تفاوت‌های بین نگارش‌های گوناگون فایل‌ها هستند -- در قالبی ویژه کار می‌کند؛
پس از این، با اعمال پچ‌ها می‌تواند هر نسخه‌ای از فایل که مربوط به هر زمان دلخواه است را بازسازی کند.

==== سیستم‌های کنترل نسخه ی متمرکز

(((version control,centralized)))
چالش بزرگ دیگری که مردم با آن روبرو می شوند نیاز به همکاری با توسعه‌دهندگانی است که با سیستم‌های دیگر کار می‌کنند.
دربرخورد با این چالش سیستم‌های کنترل نسخه متمرکز (Centralized Version Control System (CVCS)) ایجاد شدند.
این قبیل سیستم‌ها چون CVS، Subversion و Preforce یک سرور دارند که تمام فایل‌های نسخه‌بندی شده را در بر دارد و تعدادی کلاینت (Client/خدمت‌گیرنده)
که فایل‌هایی را از آن سرور چک‌اوت (Checkout/وارسی) می‌کنند. (((CVS)))(((Subversion)))(((Perforce))) سال‌های سال این روش استاندارد کنترل نسخه بوده است.

.Centralized version control.
image::images/centralized.png[Centralized version control diagram]


این ساماندهی به ویژه برای VCSهای محلی منافع و مزایای بسیاری دارد. به طور مثال هرکسی به میزان مشخصی از فعالیت های دیگران روی پروژه آگاهی دارد.
مدیریان دسترسی و کنترل مناسبی بر این دارند که چه کسی چه کاری می تواند انجام دهد؛
همچنین مدیریت یک CVCS خیلی آسان‌تر از درگیری با پایگاه‌داده‌های محلی روی تک تک کلاینت‌هاست.

هرچند که این گونه ساماندهی معایب جدی نیز دارد. واضح‌ترین آن رخدادن خطا در سروری که نسخه‌ها در آن متمرکز شده است.
اگر که سرور برای یک ساعت غیرفعال باشد، در طول این یک ساعت هیچ‌کس نمی تواند همکاری یا تغییراتی که انجام داده است را ذخیره نماید.
اگر هارددیسک سرور مرکزی دچار مشکلی شود و پشتیبان مناسبی هم تهیه نشده باشد
همه چیز (تاریخچه کامل پروژه بجز اسنپ‌شات‌هایی که یک کلاینت ممکن است روی کامپیوتر خود ذخیره کرده باشد) از دست خواهد رفت.
VCSهای محلی نیز همگی این مشکل را دارند -- هرگاه کل تاریخچه پروژه را در یک مکان واحد ذخیره کنید، خطر از دست‌دادن همه چیز را به جان می‌خرید.

==== سیستم‌های کنترل نسخه توزیع‌شده

(((version control,distributed)))

اینجا است که سیستم‌های کنترل نسخه توزیع‌شده (Distributed Version Control System (DVCS)) نمود پیدا می‌کنند.
در یک DVCS (مانند Git، Mercurial، Bazaar یا Darcs) کلاینت‌ها صرفاً به checkout کردن آخرین اسنپ‌شات فایل‌ها اکتفا نمی‌کنند؛
بلکه آن‌ها کل مخزن (Repository) را کپی عینی یا آینه (Mirror) می‌کنند که شامل تاریخچه کاملش هم می‌شود.
بنابراین اگر هر سروری که سیستم‌ها به واسطه آن در حال تعامل با یکدیگر هستند متوقف و از کار بیافتد، با کپی مخرن هر کدام از کاربران بر روی سرور، می‌توان آن را بازیابی کرد.
در واقع هر کلون، پشتیبان کاملی از تمامی داده‌ها است.


.Distributed version control.
image::images/distributed.png[Distributed version control diagram]

علاوه بر آن اکثر این سیستم‌ها تعامل کاری خوبی با مخازن متعدد خارجی دارند و از آن استقبال می‌کنند،
در نتیجه شما می‌توانید با گروه‌های مختلفی به روش‌های مختلفی در قالب پروژه‌ای یکسان به‌صورت همزمان همکاری کنید.
این قابلیت این امکان را به کاربر می‌دهد که چندین جریان کاری متنوع، مانند مدل‌های سلسه مراتبی، را پیاده‌سازی کند که انجام آن در سیستم‌های متمرکز امکان‌پذیر نیست.
